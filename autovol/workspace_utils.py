import os
from pathlib import Path
from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field
from langchain_core.tools import tool
from datetime import datetime


class ListWorkspaceFilesInput(BaseModel):
  relative_path: Optional[str] = Field(
    default=".",
    description="Optional. A relative path within the session workspace to list. Defaults to the workspace root ('.')."
  )


def list_workspace_files_logic(session_workspace_dir: str, relative_path: Optional[str] = ".") -> str:
  """
  Lists files and directories within a given path inside the session workspace.
  """
  if relative_path is None:
    relative_path = "."

  try:
    # Sanitize and resolve the target path
    base_path = Path(session_workspace_dir).resolve()
    target_path_str = (base_path / Path(relative_path)).resolve()

    # Security check: Ensure target_path is still within base_path
    if base_path not in target_path_str.parents and target_path_str != base_path:
      return f"Error: Access denied. Relative path '{relative_path}' attempts to go outside the session workspace."

    if not target_path_str.exists():
      return f"Error: Path does not exist in workspace: '{target_path_str}' (resolved from relative: '{relative_path}')"

    items = []
    for item in target_path_str.iterdir():
      try:
        stat = item.stat()
        item_type = "dir" if item.is_dir() else "file"
        size_str = f"{stat.st_size} bytes" if item.is_file() else ""
        # Getmtime returns timestamp, convert to human-readable
        mtime_str = datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S')
        items.append(f"- {item_type}: {item.name} ({size_str.strip()}) (Modified: {mtime_str})".replace(" ()", ""))
      except Exception as e:
        items.append(f"- ?type?: {item.name} (Error stating: {e})")

    if not items:
      return f"The directory '{target_path_str.name}' (relative: '{relative_path}') is empty."

    return f"Contents of workspace path '{target_path_str.name}' (relative: '{relative_path}'):\n" + "\n".join(items)

  except Exception as e:
    return f"Error listing workspace files for relative path '{relative_path}': {e}"


@tool("list_workspace_files", args_schema=ListWorkspaceFilesInput)
def list_workspace_files_tool(relative_path: Optional[str] = ".") -> str:
  """
  Lists files and directories in the current session's workspace.
  You can specify a 'relative_path' within the workspace to list a subdirectory.
  If 'relative_path' is not provided, it lists the root of the session workspace.
  Output includes item type (file/dir), name, size (for files), and last modified time.
  Use this to see files created by Volatility (after instructing it to output to '.')
  or files generated by your Python scripts.
  """
  # This docstring is for the LLM.
  # The actual logic is in list_workspace_files_logic and will be called by the graph node,
  # which will supply the session_workspace_dir.
  return "Workspace listing placeholder. Actual execution handled by the agent's tool node."
